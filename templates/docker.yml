.docker:
  image: gdiener/dind-bash:v1.0.0
  services: [ "docker:dind" ]

build:
  stage: build
  extends: .docker
  script:
    - &connection |
      # DOCKER LOGIN PHASE
      echo -n "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - |
      # DOCKER BUILD PHASE

      TAG=""

      if [ -n "${CI_COMMIT_TAG}" ]; then
        TAG="-${CI_COMMIT_TAG}"
      fi

      if [ -z "${IMAGES}" ]; then
        docker pull "${CI_REGISTRY_IMAGE}":latest || echo "Image ${CI_REGISTRY_IMAGE}:latest not found in registry, skipped!"
        docker pull "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}" || echo "Image ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} not found in registry, skipped!"

        COMMAND_TO_RUN=( docker build --cache-from "${CI_REGISTRY_IMAGE}":latest --cache-from "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}" )

        if [ -n "${BUILD_ARGS}" ]; then
          for build_arg in ${BUILD_ARGS}; do
            COMMAND_TO_RUN+=( --build-arg "${build_arg}" )
          done
        fi

        COMMAND_TO_RUN+=( -t "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}${TAG}" . )

        "${COMMAND_TO_RUN[@]}"

        docker push "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}${TAG}"
      else
        if [ -z "${DOCKERFILES_DIR}" ]; then
          DOCKERFILES_DIR=docker
        fi
        for image in ${IMAGES}; do
          docker pull "${CI_REGISTRY_IMAGE}"/"${image}":latest || echo "Image ${CI_REGISTRY_IMAGE}/${image}:latest not found in registry, skipped!"
          docker pull "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}" || echo "Image ${CI_REGISTRY_IMAGE}/${image}:${CI_COMMIT_SHORT_SHA} not found in registry, skipped!"

          COMMAND_TO_RUN=( docker build --cache-from "${CI_REGISTRY_IMAGE}"/"${image}":latest --cache-from "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}" )

          if [ -n "${BUILD_ARGS}" ]; then
            for build_arg in ${BUILD_ARGS}; do
              COMMAND_TO_RUN+=( --build-arg "${build_arg}" )
            done
          fi

          COMMAND_TO_RUN+=( -t "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}${TAG}" -f ./"${DOCKERFILES_DIR}"/"${image}"/Dockerfile . )

          "${COMMAND_TO_RUN[@]}"

          docker push "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}${TAG}"
        done
      fi

push:
  stage: push
  extends: .docker
  script:
    - *connection
    - |
      # DOCKER PUSH PHASE

      TAG=""

      if [ -n "${CI_COMMIT_TAG}" ]; then
        TAG="-${CI_COMMIT_TAG}"
      fi

      if [ -z "${IMAGES}" ]; then
        docker pull "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}${TAG}"
        docker tag "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}${TAG}" "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_TAG}"
        docker tag "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHORT_SHA}${TAG}" "${CI_REGISTRY_IMAGE}":latest
        docker push "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_TAG}"
        docker push "${CI_REGISTRY_IMAGE}":latest
      else
        for image in ${IMAGES}; do
          docker pull "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}${TAG}"
          docker tag "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}${TAG}" "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_TAG}"
          docker tag "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_SHORT_SHA}${TAG}" "${CI_REGISTRY_IMAGE}"/"${image}":latest
          docker push "${CI_REGISTRY_IMAGE}"/"${image}":"${CI_COMMIT_TAG}"
          docker push "${CI_REGISTRY_IMAGE}"/"${image}":latest
        done
      fi
