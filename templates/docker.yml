.docker:
  image: gdiener/dind-bash:v1.1.0
  services: [ "docker:19-dind" ]

variables:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

# `.docker:build:multi` template allows building a particular stage of a multi-stage Dockerfile with an optional cache facility.
# 
# Typical usage:
#
# stages:
#  - build-cache
#  - build
#
# # this step should be run before running any other steps so that it results in a cached image that can be re-used in the next build stage
# build cache:
#   extends: .docker-build
#   stage: build-cache
#   variables:
#     # target stage name
#     BUILD_TARGET: base
#     # tag suffic to produce
#     IMAGE_TAG_SUFFIX: base
#
# build prod:
#   extends: .docker-build
#   stage: build
#   variables:
#     # defines the suffix of the cache image
#     CACHE_FROM: base
#     BUILD_TARGET: prod
#     # note, no IMAGE_TAG_SUFFIX defined - this will be the main image in the repo
#
# build debug:
#   extends: .docker-build
#   stage: build
#   variables:
#     CACHE_FROM: base
#     BUILD_TARGET: debug
#     IMAGE_TAG_SUFFIX: debug
#
# build nginx:
#   extends: .docker-build
#   stage: build
#   variables:
#     # note, no CACHE_FROM defined - this will be built without cache
#     BUILD_TARGET: nginx
#     IMAGE_TAG_SUFFIX: nginx
.docker:build:multi:
  extends: .docker
  stage: build
  #variables:
  #  #### Supported vars
  #  #CACHE_FROM: base
  #  #IMAGE_TAG_SUFFIX: debug
  #  #BUILD_TARGET: prod
  script:
    # compose base docker image name
    - |
      if [ ! -z "$CI_COMMIT_TAG" -a "$CI_COMMIT_TAG" != " " ]; then
          # release build
          export DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
          # todo: do we want to override the latest in this case?
          export DOCKER_IMAGE_NAME_LATEST=$CI_REGISTRY_IMAGE:latest
      else
          if [ "$CI_COMMIT_REF_SLUG" == "master" ]; then
              export DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
              export DOCKER_IMAGE_NAME_LATEST=$CI_REGISTRY_IMAGE:latest
          else
              # branch build
              export DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA
              export DOCKER_IMAGE_NAME_LATEST=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest
          fi
      fi

    # set optional cache from option, see this: https://stackoverflow.com/a/66888649/2102087
    - |
      if [ ! -z "$CACHE_FROM" -a "$CACHE_FROM" != " " ]; then
          export CACHE_FROM_OPTION=--build-arg=base_image=$DOCKER_IMAGE_NAME-$CACHE_FROM
      fi

    # append optional tag suffix
    - |
      if [ ! -z "$IMAGE_TAG_SUFFIX" -a "$IMAGE_TAG_SUFFIX" != " " ]; then
          # append tag suffix
          export DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME-$IMAGE_TAG_SUFFIX
          export DOCKER_IMAGE_NAME_LATEST=$DOCKER_IMAGE_NAME_LATEST-$IMAGE_TAG_SUFFIX
      fi

    # set build target (default is "prod")
    - |
      if [ -z "$BUILD_TARGET" ]; then
          export BUILD_TARGET=prod
      fi

    # login, build image and push the tags
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker build --target $BUILD_TARGET $CACHE_FROM_OPTION -t $DOCKER_IMAGE_NAME -t $DOCKER_IMAGE_NAME_LATEST .
    - docker push $DOCKER_IMAGE_NAME
    - docker push $DOCKER_IMAGE_NAME_LATEST
  only:
    - merge_requests
    - tags
    - master
