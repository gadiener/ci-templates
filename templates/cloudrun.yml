.cloudrun:deploy:
  image: gdiener/ci-image-gcp:v1.0.1
  stage: deploy
  script:
    - &connection |
      # CLUSTER CONNECTION PHASE
      for var in "GOOGLE_KEY" "SERVICE_NAME" "CLUSTER_ZONE" "CLUSTER_NAME" "NAMESPACE" "GOOGLE_PROJECT"; do
          if [ -z "${!var}" ]; then
            echo
            echo "-> [WARNING] Missing '${var}' variable!"
            echo
            exit 1
          fi
      done
      echo "${GOOGLE_KEY}" > /tmp/key.json

      gcloud config set project ${GOOGLE_PROJECT}

      echo "Google project '${GOOGLE_PROJECT}' configured"
      gcloud auth activate-service-account --key-file /tmp/key.json
    - |
      # DEPLOY PHASE

      echo
      echo "-> Deploying cloudrun service '${SERVICE_NAME}' with tag '${CI_COMMIT_TAG}'"
      echo

      COMMAND_TO_RUN=( gcloud run deploy ${SERVICE_NAME} --image ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} )

      echo
      echo "-> Setting '${CLUSTER_NAME}-${CLUSTER_ZONE}' cluster!"
      echo

      COMMAND_TO_RUN+=( --platform gke --cluster ${CLUSTER_NAME} --cluster-location ${CLUSTER_ZONE})

      echo
      echo "-> Setting '${NAMESPACE}' namespace!"
      echo

      COMMAND_TO_RUN+=( --namespace ${NAMESPACE} )

      if [ -n "${CONNECTIVITY}" ]; then
        echo
        echo "-> Setting connectivity to '${CONNECTIVITY}' !"
        echo

        COMMAND_TO_RUN+=( --connectivity ${CONNECTIVITY} )
      fi

      if [ -n "${TIMEOUT}" ]; then
        echo
        echo "-> Setting timeout to '${TIMEOUT}' !"
        echo

        COMMAND_TO_RUN+=( --timeout ${TIMEOUT} )
      fi

      if [ -n "${CONCURRENCY}" ]; then
        echo
        echo "-> Setting concurrency to '${CONCURRENCY}' !"
        echo

        COMMAND_TO_RUN+=( --concurrency ${CONCURRENCY} )
      fi

      if [ -n "${CPU}" ]; then
        echo
        echo "-> Setting '${CPU}' cpu limit!"
        echo

        COMMAND_TO_RUN+=( --cpu ${CPU} )
      fi

      if [ -n "${MEMORY}" ]; then
        echo
        echo "-> Setting '${MEMORY}' mem limit!"
        echo

        COMMAND_TO_RUN+=( --memory ${MEMORY} )
      fi

      if [ -n "${MAX_INSTANCES}" ]; then
        echo
        echo "-> Setting '${MAX_INSTANCES}' max_instances!"
        echo

        COMMAND_TO_RUN+=( --max_instances ${MAX_INSTANCES} )
      fi

      if [ -n "${ENV}" ]; then
        echo
        echo "-> Setting env !"
        echo

        COMMAND_TO_RUN+=( --set-env-vars=${ENV} )
      fi

      if [ -n "${SECRET_YAML}" ]; then

        echo
        echo "-> ... also deploying kubernetes secrets"
        echo

        echo "${SECRET_YAML}" | base64 -d > /tmp/secret.yaml
        kubectl apply -f /tmp/secret.yaml --namespace=${NAMESPACE}

        if [ -n "${SECRET_MOUNTS}" ]; then
          COMMAND_TO_RUN+=( --set-secrets=[${SECRET_MOUNTS}] )
        else
          echo
          echo "Missing SECRET_MOUNTS even if SECRET_YAML was configured!"
          echo "You applied a secret without mounting it?"
          echo
        fi
      fi

      if [ -n "${CONFIGMAP_PATH}" ]; then

        echo
        echo "-> ... also deploying kubernetes configmaps"
        echo

        kubectl apply -f ${CONFIGMAP_PATH} --namespace=${NAMESPACE}

        if [ -n "${CONFIGMAP_MOUNTS}" ]; then
          COMMAND_TO_RUN+=( --set-config-maps=[${CONFIGMAP_MOUNTS}] )
        else
          echo
          echo "Missing CONFIGMAP_MOUNTS even if CONFIGMAP_PATH was configured!"
          echo "You applied a configmap without mounting it?"
          echo
        fi
      fi

      STATUS=0

      ${COMMAND_TO_RUN[@]} || STATUS=1

      if [ "${STATUS}" = "1" ]; then
        gcloud run services describe ${SERVICE_NAME} --platform gke --cluster ${CLUSTER_NAME} --cluster-location ${CLUSTER_ZONE} --namespace ${NAMESPACE}
      fi

      exit ${STATUS}

      echo
      echo "-> Deploy on ${ENVIRONMENT}: '${DOMAIN}' completed!"
      echo
  environment:
    name: ${ENVIRONMENT}
    url: http://${DOMAIN}
  variables:
    GIT_DEPTH: 1